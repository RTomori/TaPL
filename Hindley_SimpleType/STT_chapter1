@require: class-slydifi/theme/arctic-noto
@require: class-slydifi/overlay
@require: math
@require: base/typeset/math-ext
@require: pervasives
@require: list
@require: base/typeset/satysfi-it
@require: derive/derive
@require: class-jlreq/theorem
@require: class-jlreq/proof
@require: figbox/figbox
@require: colorbox/colorbox

open Derive
open FigBox
open DeriveDSL
open Colorbox
open SlydifiOverlay
let-mutable theorem-number <- 0

let make-theorem ctx header ?:title ?:number ?:tag ?:opts blk = 
  let number = Option.unwrap-or true number in
  let () = if number then theorem-number <- !theorem-number + 1 else () in
  let txt-header = if number then header ^ arabic !theorem-number else header in
  let () = if number 
      then match tag with
            | None -> ()
            | Some(tag) -> 
              register-cross-reference tag txt-header
      else ()
  in
  let str-title = embed-string txt-header in
  let ib-title =
        match title with
        | None ->   {#str-title;}
        | Some(title) -> {#str-title; (#title;)}
  in
  let user-opts = match opts with
        | None -> []
        | Some(uos) -> uos in
  let opts = List.append user-opts
        [ lefttitle 10pt; righttitle 10pt; toptitle 2.5pt; bottomtitle 2.5pt;
        fonttitle [bold];
        left 10pt; right 10pt; top 10pt;bottom 10pt;
        ]
  in

  read-block ctx '<
    +colorbox 
      (opts)
      ?:(ib-title)
      <+p{#blk;}>
  >

let-block ctx +thm = make-theorem ctx `定理` 
let-block ctx +def = make-theorem ctx `定義`
let-block ctx +lem = make-theorem ctx `補題`
let-block ctx +notation = make-theorem ctx `記法`
let-block ctx +problem = make-theorem ctx `問題`
let-block  ctx  +remark = make-theorem ctx `注意` 
let-math \mathscr m = math-char-class MathScript m in
let-math \Coloneq = math-char MathRel `::=` in
let-math \blacktriangleright = math-char MathRel `▸` in
let-math \mathscr m = math-char-class MathScript m in
let-math \eval =
  math-pull-in-scripts MathOp MathOp (fun moptS moptT -> (
    match (moptS, moptT) with
      |(None, None) -> ${\to}
      |(Some(mS), None) -> math-lower ${\to} mS
      |(None, Some(mT)) -> math-upper ${\to} mT
      |(Some(mS), Some(mT)) -> math-upper (math-lower ${\to} mS) mT
  )) in

document  '<
  +make-title(|title = {|第2回|}; author = {|Rei Tomori|}; date = {|4/21/2025.|}|);
  +frame{Overview}<
  >
>